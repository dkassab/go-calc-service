// Code generated by protoc-gen-go.
// source: calc/calc.proto
// DO NOT EDIT!

/*
Package calc is a generated protocol buffer package.

It is generated from these files:
	calc/calc.proto

It has these top-level messages:
	AddRequest
	AddReply
	SubtractRequest
	SubtractReply
	MultiplyRequest
	MultiplyReply
	DivideRequest
	DivideReply
*/
package calc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddRequest struct {
	Value1 int32 `protobuf:"varint,1,opt,name=value1" json:"value1,omitempty"`
	Value2 int32 `protobuf:"varint,2,opt,name=value2" json:"value2,omitempty"`
}

func (m *AddRequest) Reset()                    { *m = AddRequest{} }
func (m *AddRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()               {}
func (*AddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddRequest) GetValue1() int32 {
	if m != nil {
		return m.Value1
	}
	return 0
}

func (m *AddRequest) GetValue2() int32 {
	if m != nil {
		return m.Value2
	}
	return 0
}

type AddReply struct {
	Result int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *AddReply) Reset()                    { *m = AddReply{} }
func (m *AddReply) String() string            { return proto.CompactTextString(m) }
func (*AddReply) ProtoMessage()               {}
func (*AddReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddReply) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type SubtractRequest struct {
	Value1 int32 `protobuf:"varint,1,opt,name=value1" json:"value1,omitempty"`
	Value2 int32 `protobuf:"varint,2,opt,name=value2" json:"value2,omitempty"`
}

func (m *SubtractRequest) Reset()                    { *m = SubtractRequest{} }
func (m *SubtractRequest) String() string            { return proto.CompactTextString(m) }
func (*SubtractRequest) ProtoMessage()               {}
func (*SubtractRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SubtractRequest) GetValue1() int32 {
	if m != nil {
		return m.Value1
	}
	return 0
}

func (m *SubtractRequest) GetValue2() int32 {
	if m != nil {
		return m.Value2
	}
	return 0
}

type SubtractReply struct {
	Result int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *SubtractReply) Reset()                    { *m = SubtractReply{} }
func (m *SubtractReply) String() string            { return proto.CompactTextString(m) }
func (*SubtractReply) ProtoMessage()               {}
func (*SubtractReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SubtractReply) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type MultiplyRequest struct {
	Value1 int32 `protobuf:"varint,1,opt,name=value1" json:"value1,omitempty"`
	Value2 int32 `protobuf:"varint,2,opt,name=value2" json:"value2,omitempty"`
}

func (m *MultiplyRequest) Reset()                    { *m = MultiplyRequest{} }
func (m *MultiplyRequest) String() string            { return proto.CompactTextString(m) }
func (*MultiplyRequest) ProtoMessage()               {}
func (*MultiplyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MultiplyRequest) GetValue1() int32 {
	if m != nil {
		return m.Value1
	}
	return 0
}

func (m *MultiplyRequest) GetValue2() int32 {
	if m != nil {
		return m.Value2
	}
	return 0
}

type MultiplyReply struct {
	Result int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *MultiplyReply) Reset()                    { *m = MultiplyReply{} }
func (m *MultiplyReply) String() string            { return proto.CompactTextString(m) }
func (*MultiplyReply) ProtoMessage()               {}
func (*MultiplyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MultiplyReply) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type DivideRequest struct {
	Value1 int32 `protobuf:"varint,1,opt,name=value1" json:"value1,omitempty"`
	Value2 int32 `protobuf:"varint,2,opt,name=value2" json:"value2,omitempty"`
}

func (m *DivideRequest) Reset()                    { *m = DivideRequest{} }
func (m *DivideRequest) String() string            { return proto.CompactTextString(m) }
func (*DivideRequest) ProtoMessage()               {}
func (*DivideRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DivideRequest) GetValue1() int32 {
	if m != nil {
		return m.Value1
	}
	return 0
}

func (m *DivideRequest) GetValue2() int32 {
	if m != nil {
		return m.Value2
	}
	return 0
}

type DivideReply struct {
	Result float32 `protobuf:"fixed32,1,opt,name=result" json:"result,omitempty"`
}

func (m *DivideReply) Reset()                    { *m = DivideReply{} }
func (m *DivideReply) String() string            { return proto.CompactTextString(m) }
func (*DivideReply) ProtoMessage()               {}
func (*DivideReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DivideReply) GetResult() float32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*AddRequest)(nil), "calc.AddRequest")
	proto.RegisterType((*AddReply)(nil), "calc.AddReply")
	proto.RegisterType((*SubtractRequest)(nil), "calc.SubtractRequest")
	proto.RegisterType((*SubtractReply)(nil), "calc.SubtractReply")
	proto.RegisterType((*MultiplyRequest)(nil), "calc.MultiplyRequest")
	proto.RegisterType((*MultiplyReply)(nil), "calc.MultiplyReply")
	proto.RegisterType((*DivideRequest)(nil), "calc.DivideRequest")
	proto.RegisterType((*DivideReply)(nil), "calc.DivideReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Calculator service

type CalculatorClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error)
	Subtract(ctx context.Context, in *SubtractRequest, opts ...grpc.CallOption) (*SubtractReply, error)
	Multiply(ctx context.Context, in *MultiplyRequest, opts ...grpc.CallOption) (*MultiplyReply, error)
	Divide(ctx context.Context, in *DivideRequest, opts ...grpc.CallOption) (*DivideReply, error)
}

type calculatorClient struct {
	cc *grpc.ClientConn
}

func NewCalculatorClient(cc *grpc.ClientConn) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error) {
	out := new(AddReply)
	err := grpc.Invoke(ctx, "/calc.Calculator/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) Subtract(ctx context.Context, in *SubtractRequest, opts ...grpc.CallOption) (*SubtractReply, error) {
	out := new(SubtractReply)
	err := grpc.Invoke(ctx, "/calc.Calculator/Subtract", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) Multiply(ctx context.Context, in *MultiplyRequest, opts ...grpc.CallOption) (*MultiplyReply, error) {
	out := new(MultiplyReply)
	err := grpc.Invoke(ctx, "/calc.Calculator/Multiply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) Divide(ctx context.Context, in *DivideRequest, opts ...grpc.CallOption) (*DivideReply, error) {
	out := new(DivideReply)
	err := grpc.Invoke(ctx, "/calc.Calculator/Divide", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Calculator service

type CalculatorServer interface {
	Add(context.Context, *AddRequest) (*AddReply, error)
	Subtract(context.Context, *SubtractRequest) (*SubtractReply, error)
	Multiply(context.Context, *MultiplyRequest) (*MultiplyReply, error)
	Divide(context.Context, *DivideRequest) (*DivideReply, error)
}

func RegisterCalculatorServer(s *grpc.Server, srv CalculatorServer) {
	s.RegisterService(&_Calculator_serviceDesc, srv)
}

func _Calculator_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calc.Calculator/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_Subtract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubtractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Subtract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calc.Calculator/Subtract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Subtract(ctx, req.(*SubtractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calc.Calculator/Multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Multiply(ctx, req.(*MultiplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calc.Calculator/Divide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Divide(ctx, req.(*DivideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calculator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calc.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Calculator_Add_Handler,
		},
		{
			MethodName: "Subtract",
			Handler:    _Calculator_Subtract_Handler,
		},
		{
			MethodName: "Multiply",
			Handler:    _Calculator_Multiply_Handler,
		},
		{
			MethodName: "Divide",
			Handler:    _Calculator_Divide_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calc/calc.proto",
}

func init() { proto.RegisterFile("calc/calc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x4e, 0xcc, 0x49,
	0xd6, 0x07, 0x11, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x2c, 0x20, 0xb6, 0x94, 0x4c, 0x7a,
	0x7e, 0x7e, 0x7a, 0x4e, 0xaa, 0x7e, 0x62, 0x41, 0xa6, 0x7e, 0x62, 0x5e, 0x5e, 0x7e, 0x49, 0x62,
	0x49, 0x66, 0x7e, 0x5e, 0x31, 0x44, 0x8d, 0x92, 0x0d, 0x17, 0x97, 0x63, 0x4a, 0x4a, 0x50, 0x6a,
	0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x18, 0x17, 0x5b, 0x59, 0x62, 0x4e, 0x69, 0xaa, 0xa1, 0x04,
	0xa3, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x94, 0x07, 0x17, 0x37, 0x92, 0x60, 0x42, 0x12, 0x37, 0x52,
	0x52, 0xe2, 0xe2, 0x00, 0xeb, 0x2e, 0xc8, 0xa9, 0x04, 0xa9, 0x29, 0x4a, 0x2d, 0x2e, 0xcd, 0x29,
	0x81, 0xe9, 0x85, 0xf0, 0x94, 0x1c, 0xb9, 0xf8, 0x83, 0x4b, 0x93, 0x4a, 0x8a, 0x12, 0x93, 0x4b,
	0xc8, 0xb5, 0x46, 0x9d, 0x8b, 0x17, 0x61, 0x04, 0x01, 0xbb, 0x7c, 0x4b, 0x73, 0x4a, 0x32, 0x0b,
	0x72, 0x2a, 0x29, 0xb0, 0x0b, 0x61, 0x04, 0x3e, 0xbb, 0xec, 0xb9, 0x78, 0x5d, 0x32, 0xcb, 0x32,
	0x53, 0x52, 0xc9, 0xb5, 0x49, 0x95, 0x8b, 0x1b, 0x66, 0x00, 0xa6, 0x3d, 0x4c, 0x30, 0x7b, 0x8c,
	0x3a, 0x98, 0xb8, 0xb8, 0x9c, 0x13, 0x73, 0x92, 0x4b, 0x73, 0x12, 0x4b, 0xf2, 0x8b, 0x84, 0x82,
	0xb8, 0x98, 0x1d, 0x53, 0x52, 0x84, 0x04, 0xf4, 0xc0, 0x11, 0x8d, 0x88, 0x3b, 0x29, 0x3e, 0x24,
	0x91, 0x82, 0x9c, 0x4a, 0x25, 0xcd, 0xa6, 0xcb, 0x4f, 0x26, 0x33, 0x29, 0x2b, 0x29, 0xea, 0x97,
	0x19, 0xea, 0xa7, 0x56, 0x24, 0xe6, 0x16, 0x80, 0x12, 0x41, 0x4a, 0x8a, 0x7e, 0x35, 0xc4, 0x5d,
	0xb5, 0x50, 0x86, 0x51, 0xad, 0x90, 0x05, 0x17, 0x07, 0x2c, 0x7c, 0x85, 0x44, 0x21, 0xc6, 0xa0,
	0x45, 0x99, 0x94, 0x30, 0xba, 0x30, 0xc8, 0x0a, 0x06, 0x90, 0x4e, 0x58, 0x68, 0xc1, 0x74, 0xa2,
	0x45, 0x00, 0x4c, 0x27, 0x4a, 0xa0, 0x2a, 0x31, 0x08, 0x19, 0x71, 0xb1, 0x41, 0x7c, 0x2f, 0x04,
	0x55, 0x80, 0x12, 0x98, 0x52, 0x82, 0xa8, 0x82, 0x60, 0x3d, 0x49, 0x6c, 0xe0, 0x34, 0x6b, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0x92, 0xe5, 0x9e, 0xb5, 0xea, 0x02, 0x00, 0x00,
}
